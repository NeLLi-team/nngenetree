[project]
name = "nngenetree"
version = "1.1.0"
description = "NNGeneTree - Phylogenetic analysis and taxonomic classification pipeline"
authors = ["NNGeneTree Development Team"]
channels = ["conda-forge", "bioconda"]
platforms = ["linux-64"]

[dependencies]
# Core bioinformatics tools
diamond = ">=2.1.12,<3"
blast = ">=2.17.0,<3"
mafft = ">=7.5,<8"
trimal = ">=1.5.0,<2"
iqtree = "==3.0.1"

# Python and scientific stack
python = ">=3.11,<3.13"
biopython = ">=1.80,<2"
ete3 = ">=3.1.0,<4"
pandas = ">=2.0,<3"
scipy = ">=1.10,<2"
numpy = ">=1.24,<2"
lxml = ">=5.0,<6"

# Python utilities
tqdm = ">=4.65,<5"
requests = ">=2.28,<3"
click = ">=8.0,<9"

nextflow = ">=25.04.7"
openjdk = ">=11,<22"

# System tools
wget = ">=1.20,<2"
gawk = ">=5.0,<6"

# NCBI tools
entrez-direct = ">=16.2"
ncbi-datasets-cli = "*"

# Orthology analysis
orthofinder = "==3.1.0"
matplotlib = ">=3.10.6,<4"
seaborn = ">=0.13.2,<0.14"

[tasks]
# Pipeline execution
test = { cmd = "bash run_nextflow.sh test", description = "Run test pipeline with verification" }

# Pipeline control tasks
clean = { cmd = "rm -rf test_output log/*.out log/*.err work .nextflow* nextflow_*", description = "Clean test output and log files" }
clean-all = { cmd = "rm -rf *_output log work .nextflow*", description = "Clean all output directories and logs" }

# Development tasks
lint = { cmd = "python -m flake8 bin/ --max-line-length 120", description = "Lint Python scripts" }
format = { cmd = "python -m black bin/", description = "Format Python scripts with Black" }

# Setup and installation
install = { cmd = "pixi install", description = "Install all dependencies" }
shell = { cmd = "pixi shell", description = "Start a shell with the environment activated" }

# Note: For custom analysis and OrthoFinder preprocessing, run scripts directly from bin/:
# - python bin/parse_closest_neighbors.py -d <dir> -o <output>
# - python bin/orthofinder_preprocess.py --genomes_faa_dir <dir> --output_dir <dir> [--target <filter>]

[feature.dev.dependencies]
flake8 = "*"
black = "*"
pytest = "*"
ipython = "*"

[feature.dev.tasks]
dev-shell = { cmd = "pixi shell --feature dev", description = "Start development shell with extra tools" }

[environments]
default = { features = [], solve-group = "default" }
dev = { features = ["dev"], solve-group = "default" }
