{
  "integrations": [
    {
      "new": ".claude/",
      "integrates_with": [
        "CLAUDE.md"
      ],
      "note": "Claude Code configuration directory - contains impact.json and other AI assistant metadata"
    },
    {
      "new": "CLAUDE.md",
      "integrates_with": [
        "README.md",
        "workflow/Snakefile",
        "pixi.toml"
      ],
      "note": "Project-specific documentation for Claude Code - comprehensive pipeline guide with architecture, commands, and implementation notes"
    },
    {
      "new": "pixi.toml",
      "integrates_with": [
        "workflow/Snakefile",
        "workflow/envs/nngenetree.yml"
      ],
      "note": "Pixi package manager configuration - replaces conda environment management, defines dependencies and pipeline tasks"
    },
    {
      "new": "pixi.lock",
      "integrates_with": [
        "pixi.toml"
      ],
      "note": "Pixi lockfile - auto-generated dependency resolution, ensures reproducible environment"
    },
    {
      "new": "logs/",
      "integrates_with": [
        ".claude/"
      ],
      "note": "Completion guard logs directory - auto-generated by hooks, not tracked in git"
    },
    {
      "new": "old/",
      "integrates_with": [
        "example/"
      ],
      "note": "User data directory containing analysis results, notebooks, and test sequences - not part of pipeline codebase"
    },
    {
      "new": "iqtree/",
      "integrates_with": [
        "workflow/Snakefile"
      ],
      "note": "IQ-TREE output directory - generated by pipeline runs, not tracked in git"
    },
    {
      "new": "queries.faa",
      "integrates_with": [
        "example/"
      ],
      "note": "User query file - input data for pipeline testing"
    },
    {
      "new": "config.txt",
      "integrates_with": [
        "workflow/config.txt"
      ],
      "note": "Copy of workflow config for convenience - actual config is in workflow/"
    },
    {
      "new": "run_slurm.sh",
      "integrates_with": [
        "run.sh"
      ],
      "note": "SLURM-specific runner script - alternative to run.sh"
    },
    {
      "new": "example_nngenetree_slurm/",
      "integrates_with": [
        "workflow/Snakefile",
        "example/"
      ],
      "note": "SLURM pipeline run output directory - contains phylogenetic analysis results for cluster execution"
    },
    {
      "new": "example_nngenetree_local/",
      "integrates_with": [
        "workflow/Snakefile",
        "example/"
      ],
      "note": "Local pipeline run output directory - contains phylogenetic analysis results for local execution"
    },
    {
      "new": "workflow/scripts/extract_phylogenetic_neighbors.py",
      "integrates_with": [
        "workflow/Snakefile"
      ],
      "note": "Extract phylogenetic neighbors with taxonomy for specific query prefixes - used by extract_phylogenetic_placement rule"
    },
    {
      "new": "workflow/scripts/orthofinder_preprocess.py",
      "integrates_with": [
        "pixi.toml"
      ],
      "note": "OrthoFinder preprocessing script for genome-scale analysis - standalone tool with pixi tasks"
    },
    {
      "new": "workflow/scripts/process_blast_for_extraction.py",
      "integrates_with": [
        "workflow/Snakefile"
      ],
      "note": "Process BLAST results and extract unique subjects - used by process_blast_results rule"
    },
    {
      "new": "test/",
      "integrates_with": [
        "example/"
      ],
      "note": "Test directory - contains file lists for larger test databases (phyla.faa references genome files)"
    },
    {
      "new": "test/db/",
      "integrates_with": [
        "workflow/config_test.txt",
        "test/"
      ],
      "note": "Small test database for rapid pipeline testing - 131 sequences from test files, DIAMOND and BLAST databases for fast testing"
    },
    {
      "new": "workflow/config_test.txt",
      "integrates_with": [
        "workflow/config.txt",
        "test/db/"
      ],
      "note": "Test configuration file - uses small test database with reduced resources for fast validation runs"
    },
    {
      "new": "test_nngenetree/",
      "integrates_with": [
        "workflow/Snakefile",
        "workflow/config_test.txt",
        "test/db/"
      ],
      "note": "Test pipeline output directory - generated by pixi run test-fast, contains phylogenetic analysis results using small test database"
    },
    {
      "new": "test_run.log",
      "integrates_with": [
        "pixi.toml",
        "test_output/"
      ],
      "note": "Test run log file - captured output from test-fast pipeline execution for debugging and validation"
    },
    {
      "new": "workflow/scripts/combine_and_deduplicate.py",
      "integrates_with": [
        "workflow/Snakefile"
      ],
      "note": "Deduplication script for combining query and hit sequences - removes duplicate IDs and identical sequences, used by combine_sequences rule"
    },
    {
      "new": "test/db/README.md",
      "integrates_with": [
        "test/db/"
      ],
      "note": "Documentation for test database creation and usage"
    },
    {
      "new": "test/db/.gitignore",
      "integrates_with": [
        "test/db/"
      ],
      "note": "Git ignore file for test database directory"
    },
    {
      "new": "test/db/test_reference.faa",
      "integrates_with": [
        "test/db/"
      ],
      "note": "FASTA source file for test BLAST database"
    },
    {
      "new": "test/db/test_reference.pdb",
      "integrates_with": [
        "test/db/"
      ],
      "note": "BLAST database file - protein database index"
    },
    {
      "new": "test/db/test_reference.phr",
      "integrates_with": [
        "test/db/"
      ],
      "note": "BLAST database file - protein hash table"
    },
    {
      "new": "test/db/test_reference.pin",
      "integrates_with": [
        "test/db/"
      ],
      "note": "BLAST database file - protein index"
    },
    {
      "new": "test/db/test_reference.pjs",
      "integrates_with": [
        "test/db/"
      ],
      "note": "BLAST database file - protein javascript index"
    },
    {
      "new": "test/db/test_reference.pog",
      "integrates_with": [
        "test/db/"
      ],
      "note": "BLAST database file - protein OID to GI mapping"
    },
    {
      "new": "test/db/test_reference.pos",
      "integrates_with": [
        "test/db/"
      ],
      "note": "BLAST database file - protein OID to sequence mapping"
    },
    {
      "new": "test/db/test_reference.pot",
      "integrates_with": [
        "test/db/"
      ],
      "note": "BLAST database file - protein OID to taxonomy mapping"
    },
    {
      "new": "test/db/test_reference.psq",
      "integrates_with": [
        "test/db/"
      ],
      "note": "BLAST database file - protein sequences"
    },
    {
      "new": "test/db/test_reference.ptf",
      "integrates_with": [
        "test/db/"
      ],
      "note": "BLAST database file - protein taxonomy format"
    },
    {
      "new": "test/db/test_reference.pto",
      "integrates_with": [
        "test/db/"
      ],
      "note": "BLAST database file - protein taxonomy OIDs"
    }
  ]
}